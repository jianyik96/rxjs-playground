### of function is used to create an observable that emits a sequence of values as arguments. It emits all the provided values immediately in a synchronous manner

ourOwnOf('Alice', 'Ben', 'Charlie').subscribe({
  next: value => console.log(value),
  complete: () => console.log('Completed')
});

// const names$ = new Observable<string>(subscriber => {
//   subscriber.next('Alice');
//   subscriber.next('Ben');
//   subscriber.next('Charlie');
//   subscriber.complete();
// });

// names$.subscribe({
//   next: value => console.log(value),
//   complete: () => console.log('Completed')
// });

function ourOwnOf(...args: string[]): Observable<string> {
  return new Observable<string>(subscriber => {
    for (let i = 0; i < args.length; i++) {
      subscriber.next(args[i]);
    }
    subscriber.complete();
  })
}

### from function is used to create an observable from an iterable, an array-like object, a promise, an observable-like object, or an asynchronous iterable. It emits each item or event from the source in a sequential manner
// from(['Alice', 'Ben', 'Charlie']).subscribe({
//   next: value => console.log(value),
//   complete: () => console.log('completed')
// });

const somePromise  = new Promise((resolve, reject) => {
  // resolve('Resolved');
  reject('Rejected!');
});

const observableFromPromise$ = from(somePromise);

observableFromPromise$.subscribe({
  next: value => console.log(value),
  error: err => console.log('Error', err),
  complete: () => console.log('completed')
})

### from Event - 
<button id="trigger">Trigger</button>
const triggerButton = document.querySelector('button#trigger');

// const subscription = fromEvent<MouseEvent>(triggerButton, 'click')
// .subscribe(
//     event => console.log(event.type, event.x, event.y)
// );

const triggerClick$ = new Observable<MouseEvent>(subscribe => {
    const clickHandlerFn = (event: MouseEvent) => {
        console.log('Event callback executed');
        subscribe.next(event)
    };
    
    triggerButton.addEventListener('click', clickHandlerFn);

    return () => {
        triggerButton.removeEventListener('click', clickHandlerFn)
    }
});

const subscription = triggerClick$.subscribe(
    (event: MouseEvent) => console.log(event.type, event.x, event.y)
);

setTimeout(() => {
    console.log('Unsubscribe')
    subscription.unsubscribe();
}, 3000);

### fork Join 
## Handle multiple HTTP calls
const randomName$ = ajax('https://random-data-api.com/api/name/random_name');
const randomNation$ = ajax('https://random-data-api.com/api/nation/random_nation');
const randomFood$ = ajax('https://random-data-api.com/api/food/random_food');
 
// randomName$.subscribe((ajaxResponse: any) => console.log(ajaxResponse.response.first_name));
// randomNation$.subscribe((ajaxResponse: any) => console.log(ajaxResponse.response.capital));
// randomFood$.subscribe((ajaxResponse: any) => console.log(ajaxResponse.response.dish));

forkJoin([randomName$, randomNation$, randomFood$]).subscribe(
    ([nameAjax, nationAjax, foodAjax]: any) => console.log(`${nameAjax.response.first_name} is from ${nationAjax.response.capital} and like to eat ${foodAjax.response.dish}.`)
);
## Error Scenario
const a$ = new Observable(subscriber => {
    setTimeout(() => {
        subscriber.next('A');
        subscriber.complete();
    }, 5000);

    return () => {
        console.log('A teardown');
    }
});

const b$ = new Observable(subscriber => {
    setTimeout(() => {
        subscriber.error('Failure!');
    }, 3000);

    return () => {
        console.log('B teardown');
    }
});

forkJoin([a$, b$]).subscribe({
    next: value => console.log(value),
    error: err => console.log('Error:', err)
});

###combine Latest
<div class="container">
  <h2 class="my-4">RxJS Playground</h2>
  <div class="card">
    <div class="card-body">
      <input type="text" id="temperature-input" class="form-control" placeholder="Temperature">
      <br>
      <select id="conversion-dropdown" class="form-control">
        <option value="">Choose conversion</option>
        <option value="f-to-c">F -> C</option>
        <option value="c-to-f">C -> F</option>
      </select>
      <br>
      <p class="card-text" id="result-text">Please fill the above form</p>
    </div>
  </div>
</div>

const temperatureInput = document.getElementById('temperature-input');
const conversionDropdown = document.getElementById('conversion-dropdown');
const resultText = document.getElementById('result-text');

const temperatureInputEvent$ = fromEvent(temperatureInput, 'input');
const conversionInputEvent$ = fromEvent(conversionDropdown, 'input');

combineLatest([temperatureInputEvent$, conversionInputEvent$]).subscribe(
    ([temperatureInputEvent, conversionInputEvent]: any) =>{
        const temperature = Number(temperatureInputEvent.target['value']);
        const conversion = conversionInputEvent.target['value'];

        let result: number;
        if (conversion === 'f-to-c') {
            result = (temperature - 32) * 5/9;
        } else if (conversion === 'c-to-f') {
            result = temperature * 9/5 + 32;
        }

        resultText.innerText = String(result);

        // console.log(
        //     temperatureInputEvent.target['value'],
        //     conversionInputEvent.target['value']
        // )
    }
);