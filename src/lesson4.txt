Pipeline Operators

### Filter Operators
interface NewsItem {
    category: 'Bussines' | 'Sports';
    content: string;
}

const newsFeed$ = new Observable<NewsItem>(subscriber => {
    setTimeout(() =>
        subscriber.next({ category: 'Bussines', content: 'A' }), 1000);
    setTimeout(() =>
        subscriber.next({ category: 'Sports', content: 'B' }), 3000);
    setTimeout(() =>
        subscriber.next({ category: 'Bussines', content: 'C' }), 4000);
    setTimeout(() =>
        subscriber.next({ category: 'Sports', content: 'D' }), 6000);
    setTimeout(() =>
        subscriber.next({ category: 'Bussines', content: 'E' }), 7000);
});

const sportsNewsFeed = newsFeed$.pipe(
    filter(item => item.category ===  'Sports')
);

sportsNewsFeed.subscribe(
    item => console.log(item)
);

### Map Operator
const randomFirstmName$ = ajax('https://random-data-api.com/api/name/random_name').pipe(
    map((ajaxResponse: any) => ajaxResponse.response.first_name)
);

const randomCapital$ = ajax('https://random-data-api.com/api/nation/random_nation').pipe(
    map((ajaxResponse: any) => ajaxResponse.response.capital)
);

const randomDish$ = ajax('https://random-data-api.com/api/food/random_food').pipe(
    map((ajaxResponse: any) => ajaxResponse.response.dish)
);
 
randomFirstmName$.subscribe((value) => console.log(value));
randomCapital$.subscribe((value) => console.log(value));
randomDish$.subscribe((value) => console.log(value));

forkJoin([randomFirstmName$, randomCapital$, randomDish$]).subscribe(
    ([firstName, capital, dish]: any) => console.log(`${firstName} is from ${capital} and like to eat ${dish}.`)
);

### Tap Operator
of(1, 7, 3, 6, 2).pipe(
    filter(val => val > 5),
    map(val => val * 2),
    tap({
        next: val => console.log('Spy', val),
    }),
).subscribe(val => console.log('Output', val));

### Debounce Time
<div class="my-4 form-inline">
    <div class="d-flex">
        <input id="slider" class="form-control" type="range" min="0" max="100" />
    </div>
</div>

const sliderInput = document.querySelector('input#slider');

fromEvent(sliderInput, 'input')
.pipe(
    debounceTime(2000),
    map((event: any) => event.target['value'])
)
.subscribe(val => console.log(val));


### Catch Error Operator
const failiungHttpRequest$ = new Observable(subscriber => {
    setTimeout(() => {
        subscriber.error(new Error('Timeout'));
    }, 3000);  
})

console.log('App started');

// Provide a fail back value
// failiungHttpRequest$.pipe(
//     catchError(error => of('Fallback value'))
// ).subscribe(
//     val => console.log(val)
// );

// Hide the error
failiungHttpRequest$.pipe(
    catchError(error => EMPTY)
).subscribe({
    next: val => console.log(val),
    complete: () => console.log('Completed')
});

### Concat Map
## Static Example
const source$ = new Observable(subscriber => {
    setTimeout(() => subscriber.next('A'), 2000);
    setTimeout(() => subscriber.next('B'), 5000);
});

console.log('App has started');
source$.pipe(
    concatMap(val => of(1, 2))
).subscribe(val => console.log(val));


 <div class="my-4 form-inline">
    <div class="d-flex">
        <input id="endpoint" class="form-control" type="text" />
        <button id="fetch" class="btn btn-primary mx-1">Fetch</button>
    </div>
</div>

## Dynamic HTTP Request
const endpointInput: HTMLInputElement = document.querySelector('input#endpoint');
const fetchButton = document.querySelector('button#fetch');

fromEvent(fetchButton, 'click').pipe(
    map(() => endpointInput.value),
    concatMap(value =>
        ajax(`https://random-data-api.com/api/${value}/random_${value}`)
    )
).subscribe(
    val => console.log(val)
);

## Error Handling - First Solution - Error Stop Immediately
fromEvent(fetchButton, 'click').pipe(
    map(() => endpointInput.value),
    concatMap(value =>
        ajax(`https://random-data-api.com/api/${value}/random_${value}`)
    ),
    catchError(() => EMPTY)
).subscribe({
    next: val => console.log(val),
    error: err => console.log('Error:', err),
    complete: () => console.log('Completed')
});

## Error Handling - Second Solution - Catch the error and continue work
fromEvent(fetchButton, 'click').pipe(
    map(() => endpointInput.value),
    concatMap(value =>
        ajax(`https://random-data-api.com/api/${value}/random_${value}`).pipe(
            catchError((error) => of(`Could not fetch data: ${error}`))
        )
    ),
).subscribe({
    next: val => console.log(val),
    error: err => console.log('Error:', err),
    complete: () => console.log('Completed')
});

### Switch Map